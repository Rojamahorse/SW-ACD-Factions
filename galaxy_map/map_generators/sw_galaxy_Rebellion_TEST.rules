MapNodes
{
	Type = MapNodes
	Distance = [5, 10]
	ConnectionRadius = 10
	NameGenerator = &<../../name_generators/sw_name_celestial.rules>/CelNameGen
}

// Nebulas
SectorTypes
{
	Type = RandomSectorTypes
	SectorTypes
	[
		{
			Type = basic
			RandomWeight = 1
		}
		{
			Type = binary
			RandomWeight = 0.5
		}
		{
			Type = high_density_nebula
			RandomWeight = 0.5
		}
		{
			Type = supernova
			RandomWeight = 0.5
		}
	]
}

Factions
{
	Type = Factions
	Factions
	[
		{
			FactionID = SW.Galactic_Empire
			TerritoryRatio = 40%
			AvoidOtherFactionsStrength = 0.3
			AvoidEdgeStrength = 0.2
			FactionStrengthExponent = 1
			MinFactionStrength = 5%
		}
		{
			FactionID = SW.Republic
			TerritoryRatio = 40%
			AvoidOtherFactionsStrength = 0.3
			AvoidEdgeStrength = 0.2
			FactionStrengthExponent = 1
			MinFactionStrength = 5%
		}
		{
			FactionID = SW.Black_Sun
			TerritoryRatio = 20%
			AvoidOtherFactionsStrength = 0.3
			AvoidEdgeStrength = 0.1
			FactionStrengthExponent = 1
			MinFactionStrength = 5%
		}
	]
	RemainderFaction = SW.Rebel_Alliance
	RemainderFactionThreshold = 1.5
	MinRemainderFactionStrength = 5%
	AvoidIterations = 10
}

MaxTier = 18
TierSpread = 1

FactionTiers
{
	Type = FactionNodeTiers
	Factions
	[
		{
			FactionID = SW.Galactic_Empire
			TierRangeLow = [1, (&~/MaxTier) - (&~/TierSpread)]
			TierRangeHigh = [1 + (&~/TierSpread), (&~/MaxTier)]
		}
		{
			FactionID = SW.Republic
			TierRangeLow = [1, (&~/MaxTier) - (&~/TierSpread)]
			TierRangeHigh = [1 + (&~/TierSpread), (&~/MaxTier)]
		}
		{
			FactionID = SW.Black_Sun
			TierRangeLow = [1, (&~/MaxTier) - (&~/TierSpread)]
			TierRangeHigh = [1 + (&~/TierSpread), (&~/MaxTier)]
		}
		{
			FactionID = SW.Rebel_Alliance
			TierRangeLow = [1, (&~/MaxTier) - (&~/TierSpread)]
			TierRangeHigh = [1 + (&~/TierSpread), (&~/MaxTier)]
		}
	]
}

StartingNodePicker
{
	Type = StartingNodePicker
	AllowedFactions = [SW.Rebel_Alliance, SW.Galactic_Empire]
	MinConnections = 1
	CandidatesFarthestFromFactions = [3, [SW.Republic, SW.Black_Sun]]
	SetTierRangeTo = [1, 1 + (&~/TierSpread)]
	SetSectorTypeTo = basic
}

ProgressionTiers
{
	Type = ProgressionNodeTiers
	MaxLowTier = (&~/MaxTier) - (&~/TierSpread) - 1
	MaxChangeableLowTier = (&MaxLowTier)
	DesiredTierDeltas
	[
		{
			SourceLowTierDelta = 3
			Priority = 0
			HighTierSpread = &~/TierSpread
			PreferredAvailableConnections = 2
		}
		{
			SourceLowTierDelta = 1
			Priority = 0
			HighTierSpread = &~/TierSpread
			SourceLowTierRange = [1, 1]
			PreferredAvailableConnections = 1
		}
		{
			SourceLowTierDelta = 2
			Priority = 1
			HighTierSpread = &~/TierSpread
			SourceLowTierRange = [2, (&~/MaxTier)]
		}
		{
			SourceLowTierDelta = 1
			Priority = 2
			HighTierSpread = &~/TierSpread
		}
		{
			SourceLowTierDelta = 0
			Priority = 3
			HighTierSpread = &~/TierSpread
		}
		{
			SourceLowTierDelta = -1
			Priority = 4
			HighTierSpread = &~/TierSpread
		}
		{
			SourceLowTierDelta = -1
			Priority = 4
			HighTierSpread = &~/TierSpread
		}
	]
}
