Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.fighter_rg_9_cannon
	// OtherIDs = []

	//StringKeys
	NameKey = "Parts/RG9Cannon"
	IconNameKey = "Parts/RG9CannonIcon"
	DescriptionKey = "Parts/RG9CannonDesc"
	
	//Groups&Categories
	EditorGroups = ["WeaponsEnergy","SWTechI"]
	TypeCategories = [weapon, uses_power]
	
	//Resources&Size&Health
	Resources
	[
		[steel, 22]
		[coil, 8]
	]
	Size = [1, 1]
	MaxHealth = 2000
	
	//Rects
	PenetrationRectType = Normal
	//ProhibitRects
	//[
	//	[fighter, [0, -2, 1, 2]]
	//]
	
	//Selections
	//SelectionTypeID = "fighter"
	SelectionPriority = 1
	SelectionTypeByRotation = true
	
	//PartSpecific
	InitialPenetrationResistance = 1
	IsFlippable = true
	Density = 0.5
	
	//ReceivableBuffs
	ReceivableBuffs : ^/0/ReceivableBuffs []
	//ProhibitedBy : ^/0/ProhibitedBy [fighter]
	
	//Doors&Etc
	AllowedDoorLocations
	[
		[-1, 0]
		[1, 0]
		[0, 1]
	]
	
	//Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [16, 64]
	}
	
	//Components
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2500
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			ResupplyThreshold = 1
			DefaultPriority = &/PRIORITIES/Defense_Supply
			OperationalToggle = PowerToggle
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, .5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/point_defense/floor.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/floor_33.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/doodads_on1C.png"
							"../base/doodads_on2C.png"
							"../base/doodads_on3C.png"
							"../base/doodads_on4C.png"
							"../base/doodads_on5C.png"
							"../base/doodads_on6C.png"
							"../base/doodads_on7C.png"
							"../base/doodads_on8C.png"
						]
						NormalsAnimationFiles
						[
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
							"../base/doodads_normalsB.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						File = "../base/doodads_offD.png"
						NormalsFile = "../base/doodadsD_normals.png"
						Size = [1, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../base/lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/point_defense/walls.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/walls_33.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/point_defense/roof.png"
						NormalsFile = "./Data/ships/terran/point_defense/roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/roof_33.png"
						NormalsFile = "./Data/ships/terran/point_defense/roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/roof_66.png"
						NormalsFile = "./Data/ships/terran/point_defense/roof_normals_66.png"
						Size = [1, 1]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [0.5, -0.25]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .8
			FiringArc = 10d
			RotateSpeed = 90d
			FireThresholdAngle = 5d			
			AIFirepowerRating = 400
			AllowFireWithBlockedLOS = true
			IgnoreFriendlyShipLowLOSChecks = false
			UseResourcePerShotInBurst = true
			Emitter = BulletEmitter

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = FireModeToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [1.38, 0]
			OperationalToggle = IsOperational
			Bullet = &<rg_9_shot/rg_9_shot.rules>
			Spread = [-1.5d, 1.5d]
			Burst = 2
			BurstDelay = 0.075
			ResourceStorage = BatteryStorage
			ResourcesUsed = 125
			MinResourcesUsed = 1
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = Turret
			Location = [1.7, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot.rules>
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot_flash.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "../common_effects/sounds/sw_HOUNDSTOOTH_1.WAV"
					Volume = .3
					SpeedVariation = .25
				}
			]
		}
/*
		TurretHolder
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.4, 0]
			Rotation = 90d
			Layer = "roof_turrets"
			AtlasSprite
			{
				File = "turret_holder.png"
				NormalsFile = "turret_holder_normals.png"
				Size = [1, 3]
				//Offset = [0, .2] 
			}
		}
*/
		TurretGraphicsHigh
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0.4, 0]// [0.86, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						File = "turret_dual_off_alt.png"
						NormalsFile = "turret_dual_off_alt_normals.png"
						Size = [1, 3]
						//Offset = [0, .2]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
		}

		TurretGraphicsLow
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0.4, 0]// [0.86, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_dual_off_alt.png"
						NormalsFile = "turret_dual_off_alt_normals.png"
						Size = [1, 3]
						//Offset = [0, .2]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
		}


		BatterySpritesA
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			RangeLow = 0
			RangeHigh = 1000
			ResourceLevels
			[
				{
					File = "../base/batteries4.png"
					MirrorU = true
					Size = [1, 1]
				}
			]
		}

		BatterySpritesB
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			RangeLow = 1001
			RangeHigh = 2000
			ResourceLevels
			[
				{
					File = "../base/batteries4.png"
					Size = [1, 1]
				}
			]
		}


		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, .5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 3]
			Offset = [0, -1]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		MinPower = (&../StatsByCategory/0/Stats/PowerPerSecond) / 2
		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		MinCrew = (&MinPower) * 2
		RecCrew = (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/SWBurstLaser"
			Stats
			{
				ShieldDamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
				ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&ROF)
				ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BulletEmitter/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				ShotHP = &~/Part/Components/BulletEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}
