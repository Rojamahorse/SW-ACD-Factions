Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/DroidTurret"
	IconNameKey = "Parts/DroidTurretIcon"
	ID = SW.droid_turret
	OtherIDs = []
	EditorGroups = ["WeaponsEnergy","Defenses"]
	DescriptionKey = "Parts/DroidTurretDesc"
	Resources
	[
		[steel, 50]
		[coil, 15]
	]
	Size = [1, 2]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 3000
	TypeCategories = [weapon, uses_power, is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall]
	AllowedDoorLocations
	[
		[1,1]
		[-1,1]
		[0,2]
	]
	EditorIcon
	{
		Texture
		{
			File = "turret_on.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			// AvailableChoices = [-1, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FirePrefToggle
		{
			Type = UIToggle
			ToggleID = "fire_pref"
			Default = 1
		}
		FirePrefAttack
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [0, 2]
		}
		FirePrefDefend
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [1, 2]
		}
		AttackToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefAttack]
			Mode = All
		}
		DefendToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefDefend]
			Mode = All
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			ResupplyThreshold = 1
			DefaultPriority = &/PRIORITIES/Defense_Supply
			OperationalToggle = PowerToggle
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 1]
						Offset = [0, -.5]
						AnimationInterval = 0.1
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [.5, 1]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 1 // .75
//			FirePermissionToggle = FirePermissionToggle
			FiringArc = 360d
			RotateSpeed = 225d
			FireThresholdAngle = 1d
			AIFirepowerRating = 150
			// Emitter = BaseEmitter
			CanBeGivenExplicitTarget = false
			IgnoreFriendlyShipLowLOSChecks = true
			TargetSearchesPerSecond = 4 // Default is 2.
			HoldTargetAfterCancel = .5
			TargetPathThickness = .2// &../BulletEmitter/Bullet/Components/Physics/Radius
			AllowDirectControl = false

			AutoTargets
			[
				{
					TargetType = Bullets
					BulletTargetCategories = [missile, mine, bullet]
					Toggle = DefendToggle
				}
				{
					TargetType = ShipParts
					Toggle = AttackToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
			

		}
/*
		ShootSynchronizedComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Invert = true
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 1.25*2
					AutoStart = true
					StartTrigger = Turret
				}		
*/

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

/*
				ShootLeftTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}

				ShootRightTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}
*/
/*
		ShootAlternatingComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 1.25
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootCycle
				{
					Type = ModeCycle
					ModeRange = [0, 1]
					IncrementTrigger = Turret
					StartingMode = 1 // First shot will switch to mode 0.
				}

				ShootLeftTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [0]
				}

				ShootRightTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [1]
					OperationalToggle = FireAlternatingToggle
				}
			}
		}
		FireTimerProxy
		{
			Type = ToggleProxy
			ComponentID = FireTimer
		}
		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [FireTimerProxy, FireModeToggle]
			Mode = All
		}

		ShootTrigger1
		{
			Type = TriggerProxy
			ComponentID = ShootLeftTrigger
		}
		ShootTrigger2
		{
			Type = TriggerProxy
			ComponentID = ShootRightTrigger
		}

		TurretCollider
		{
			Type = CircleCollider
			Location = &../Turret/Location
			Radius = 1.5
			IsHigh = true
		}

		*/

		BaseEmitter : <../common_shots/sw_pd_beam_shot/sw_pd_beam_shot.rules>
		{
			Type = BeamEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [1.4, -.28]
			OperationalToggle = IsOperational
			// Bullet = &<../common_shots/sw_pd_beam_shot/sw_pd_beam_shot.rules>
			// Spread = [-5.5d, 5.5d]
			ResourceStorage = BatteryStorage
			ResourcesUsed = 100
			MinResourcesUsed = 100 
			Burst = 1
			FireDelay = .25
			//UseResourcePerShotInBurst = true
			SourceShipLowCollisions = false

//			Recoil = 240
		}

		Emitter1 : BaseEmitter
		{
			Location = [1.05, 0.28]
			ChainedTo = Turret
			FireTrigger = Turret
			ResourceStorage = BatteryStorage
		}
/*
		Emitter2 : BaseEmitter
		{
			Location = [0, 0.25]
			ChainedTo = BaseEmitter
			FireTrigger = Turret
			ResourceStorage = BatteryStorage
		}
*/
		FireEffect1
		{
			Type = TriggeredEffects
			ChainedTo = Emitter1
			Trigger = Emitter1
			Location = [0, 0] // [1.4, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot_flash.rules>
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/laser_blaster_small/shoot.wav"
					Volume = .4
					SpeedVariation = .25
				}
			]
		}
		FireEffect2 : FireEffect1
		{
			Type = TriggeredEffects
			ChainedTo = BaseEmitter
			Trigger = BaseEmitter
			Location = [0, 0] // [1.05, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot_flash.rules>
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/laser_blaster_small/shoot.wav"
					Volume = .4
					SpeedVariation = .25
				}
			]
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 0.6875]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [BatteryStorage, PowerToggle]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [.5, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						File = "turret_on.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						File = "turret_off.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = BatteryStorage
			HasZeroResourceSprite = true
			Layer = "doodads_high"
			ResourceLevels
			[	
				{
					File = "batteries0.png"
					Size = [1, 2]
				}
				{
					File = "batteries1.png"
					Size = [1, 2]
				}
				{
					File = "batteries2.png"
					Size = [1, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
	}
	
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		MinPower = (&../StatsByCategory/0/Stats/PowerPerSecond) / 2
		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		MinCrew = (&CrewRequired) + (&MinPower) * 2
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/SWFighterWeapons"
			Stats
			{
				DamagePerShot = &~/Part/Components/BaseEmitter/HitNothing/HitEffects/0/TotalDamage    // Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				// Salvo = [(&~/Part/Components/BaseEmitter/Burst), (&~/Part/Components/Turret/FireInterval)]
				ROF = (&~/Part/Components/BaseEmitter/Burst) / (&~/Part/Components/Turret/FireInterval) // 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BaseEmitter/Range // Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				// Spread = deg(&~/Part/Components/BaseEmitter/Spread/1)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = Infinity // &~/Part/Components/BaseEmitter/Bullet/Speed
//				ShotHP = &~/Part/Components/BaseEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BaseEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}
