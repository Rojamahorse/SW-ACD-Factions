Sector
{
    // Unique identifier for this sector type
    ID = SW.nh_basic // A New Hope

    // Localization key for the sector name
    NameKey = "SectorTypes/Basic"

    // Rule: Since this basic sector type is used as a base for other sector types,
    // it doesn't define any spawn flags. This means it serves as a template,
    // and any specific spawns that need to be excluded in sub-types should define
    // their own flags to disable those specific spawns.
    // This ensures flexibility in creating various sector sub-types from this base type.

    SystemGenerator
    {
        // List of spawner configurations for generating various system elements within the sector
        Spawners
        [
            &<./Data/modes/career/sectors/sysgen_planets.rules>                 // Configuration for generating planets
            &<./Data/modes/career/sectors/sysgen_standard_nebulas.rules>        // Configuration for generating standard nebulas
            &<./Data/modes/career/sectors/sysgen_high_density_nebulas.rules>    // Configuration for generating high-density nebulas
            &<./Data/modes/career/sectors/sysgen_supernova_nebulas.rules>       // Configuration for generating supernova nebulas
            &<./Data/modes/career/sectors/sysgen_ftl_gates.rules>               // Configuration for generating FTL gates
            &<../A_New_Hope/sysgen_sw_suns.rules>                                          // Configuration for generating suns
            &<../A_New_Hope/sysgen_sw_trade_stations.rules>                                // DONE! Configuration for generating trade stations
            &<../A_New_Hope/sysgen_sw_military_stations.rules>                             // Configuration for generating military stations
            &<../A_New_Hope/sysgen_sw_wanderers.rules>                                     // DONE! Configuration for generating wanderer ships
            &<../A_New_Hope/sysgen_sw_bounties.rules>                                      // Configuration for generating bounty missions
            &<../A_New_Hope/sysgen_sw_asteroids.rules>                                     // DONE! Configuration for generating asteroid fields
            &<../A_New_Hope/sysgen_sw_misc_discoverables.rules>                            // Configuration for generating miscellaneous discoverables
            &<../A_New_Hope/sysgen_sw_ftl_beacons.rules>                                   // Configuration for generating FTL beacons
            &<../A_New_Hope/sysgen_sw_sim_global_missions.rules>                           // DONE! Configuration for generating global missions
			&<../../sysgen_sw_fleethideouts.rules>/SWFleethideouts
			&<../../sysgen_sw_defectors.rules>
			&<../../sysgen_sw_renegadeleaders.rules>
			&<../../sysgen_sw_viprescue.rules>        
        ]
    }

    TradeRoutes
    {
        // Maximum number of trade ships allowed per endpoint
        MaxTradeShipsPerEndpoint = 2.25

        // Maximum number of trade ships allowed simultaneously per station
        MaxSimultaneousTradeShipsPerStation = 3

        // Interval range (in seconds) for spawning trade ships
        TradeShipSpawnInterval = [5, 10]

        // Distance within which a trade ship is considered to have reached its destination
        DestinationReachedDistance = 5

        // Speed threshold for when a trade ship is considered to have reached its destination
        DestinationReachedSpeed = 0.25

        // Delay before an FTL ship is removed after reaching its destination
        FtlRemoveDelay = &<./Data/ships/base_ship.rules>/FtlEffects/TotalDuration

        // Minimum distance from endpoints to spawn trade ships
        MinTradeShipSpawnDistFromEndpoints = 1000

        // Desired deltas for station resource trade, determining how much resources should fluctuate
        StationResourceTradeDeltas
        [
            { ResourceType=hyperium;          DesiredDelta=[-20, 20]; }
            { ResourceType=steel;             DesiredDelta=[-200, 200]; }
            { ResourceType=SW.durasteel;      DesiredDelta=[-100, 100]; }
            { ResourceType=SW.doonium;        DesiredDelta=[-50, 50]; }
            { ResourceType=steel;             DesiredDelta=[-200, 200]; }
            { ResourceType=coil;              DesiredDelta=[-100, 100]; }
            { ResourceType=coil2;             DesiredDelta=[-100, 100]; }
            { ResourceType=tristeel;          DesiredDelta=[-10, 10]; }
            { ResourceType=diamond;           DesiredDelta=[-10, 10]; }
            { ResourceType=processor;         DesiredDelta=[-10, 10]; }
            { ResourceType=enriched_uranium;  DesiredDelta=[-10, 10]; }
            { ResourceType=sulfur;            DesiredDelta=[-50, 50]; }
            { ResourceType=iron;              DesiredDelta=[-100, 100]; }
			{ ResourceType=SW.zersium;		  DesiredDelta=[-50, 50]; }
            { ResourceType=copper;            DesiredDelta=[-50, 50]; }
			{ ResourceType=SW.doonium_ingot;  DesiredDelta=[-20, 20]; }
            { ResourceType=tritanium;         DesiredDelta=[-10, 10]; }
            { ResourceType=carbon;            DesiredDelta=[-15, 15]; }
            { ResourceType=gold;              DesiredDelta=[-10, 10]; }
            { ResourceType=uranium;           DesiredDelta=[-10, 10]; }
            { ResourceType=bullet;            DesiredDelta=[-100, 100]; }
            { ResourceType=missile_part_he;   DesiredDelta=[-50, 50]; }
            { ResourceType=missile_part_emp;  DesiredDelta=[-10, 10]; }
            { ResourceType=missile_part_nuke; DesiredDelta=[-10, 10]; }
            { ResourceType=mine_part;         DesiredDelta=[-30, 30]; }
        ]
    }

    ResourceDeliveryMissions
    {
        // Meta type for the resource delivery missions
        Metatype = ResourceDelivery

        // Time limit to complete the mission (30 minutes)
        TimeLimit = 30:00

        // Maximum number of simultaneous missions allowed per station
        SimultaneousMissionsPerStation = 2

        // Percentage of the sell price given as a reward for completing the mission
        RewardMoneyPerSellPrice = 75%

        // Round the reward money to the nearest multiple
        RoundRewardMoneyToMultiple = 100

        // Configuration for various types of resource delivery missions
        DeliveryTypes
        [
			{
				ResourceType = SW.doonium
                Quantity = [30, 60]
				RoundQuantityToMultiple = 5
			}
			{
				ResourceType = SW.doonium_ingot
				Quantity = [10, 20]
				RoundQuantityToMultiple = 5
			}
			{
				ResourceType = SW.durasteel
				Quantity = [60, 100]
				RoundQuantityToMultiple = 5
			}
			{
				ResourceType = SW.zersium
				Quantity = [10, 40]
				RoundQuantityToMultiple = 5
			}
            {
                ResourceType = steel
                Quantity = [80, 120]
                RoundQuantityToMultiple = 20
            }
            {
                ResourceType = coil
                Quantity = [40, 60]
                RoundQuantityToMultiple = 20
            }
            {
                ResourceType = coil2
                Quantity = [30, 45]
                RoundQuantityToMultiple = 20
            }
            {
                ResourceType = tristeel
                Quantity = [20, 40]
                RoundQuantityToMultiple = 20
            }
            {
                ResourceType = diamond
                Quantity = [2, 3]
            }
            {
                ResourceType = processor
                Quantity = [3, 5]
            }
            {
                ResourceType = enriched_uranium
                Quantity = [4, 6]
            }
            {
                ResourceType = hyperium
                Quantity = [20, 40]
                RoundQuantityToMultiple = 20
            }
            {
                ResourceType = iron
                Quantity = [20, 30]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = copper
                Quantity = [15, 25]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = tritanium
                Quantity = [10, 15]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = carbon
                Quantity = [10, 15]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = gold
                Quantity = [5, 10]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = uranium
                Quantity = [5, 10]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = sulfur
                Quantity = [20, 30]
                RoundQuantityToMultiple = 5
            }
            {
                ResourceType = bullet
                Quantity = [320, 480]
                RoundQuantityToMultiple = 20
            }
            {
                ResourceType = missile_part_he
                Quantity = [160, 240]
                RoundQuantityToMultiple = 10
            }
            {
                ResourceType = missile_part_emp
                Quantity = [80, 120]
                RoundQuantityToMultiple = 10
            }
            {
                ResourceType = missile_part_nuke
                Quantity = [40, 60]
                RoundQuantityToMultiple = 10
            }
            {
                ResourceType = mine_part
                Quantity = [64, 96]
                RoundQuantityToMultiple = 4
            }
        ]
    }

    EncounterRules
    {
        // Minimum time (in seconds) between encounters
        MinTimeBetweenEncounters = 500

        // Radius (in game units) within which an encounter can be triggered
        TriggerRadius = 1700  //sensor radius is 2400, so we can do 2400 / 1.3, so higher than 1846

        // Space between other encounters
        _spaceBetweenOthers = 400

        // Time (in seconds) before an encounter is forcibly regenerated
        TimeBeforeForcedRegenerate = 2000

        EncounterTriggersGenerator
        {
            // List of spawners for generating encounter triggers
            Spawners
            [
                {
                    Type = EncounterTriggers
                    Tags = [encounter_trigger]
                    Count = 99 // spawn as many as possible
                    SuppressLocationAssertions = true // needed when we have 99 counts because not finding one is normal
                    _distanceToOthers = (&~/Sector/EncounterRules/TriggerRadius) + (&~/Sector/EncounterRules/_spaceBetweenOthers)
                    Distance = [0, 20000]
                    MinDistanceFromSiblings = &_distanceToOthers
                    MinDistanceFromTags
                    [
                        [sun, 2500 + (&../../_distanceToOthers)]
                        [station, &../../_distanceToOthers]
                        [bounty_area, &../../_distanceToOthers]
                        [player_ship, (&../../_distanceToOthers)]
                    ]
                }
            ]
        }

        // List of possible encounters that can occur in this sector
        PossibleEncounters
        [
             &<./Data/modes/career/encounters/encounter_ambush.rules> // Reference to the ambush encounter configuration
             &<../../encounters/encounter_sw_ambush_empire_sm.rules> // Reference to the SW ambush encounter configuration
        ]
    }
}
