/* These are the maximum values for each tier in the game. The player's tier 
is determined by their current wealth and fame.*/ 
TierValueMaximums // Maximum values for each tier
[
	60000, // Tier 1
	75000, // Tier 2
	90000, // Tier 3
	110000, // Tier 4
	140000, // Tier 5
	180000, // Tier 6
	230000, // Tier 7
	300000, // Tier 8
	400000, // Tier 9
	500000, // Tier 10
	650000, // Tier 11
	800000, // Tier 12
	1000000, // Tier 13
	1300000, // Tier 14
	1600000, // Tier 15
	2000000, // Tier 16
	2500000, // Tier 17
	3000000, // Tier 18
	4000000, // Tier 19
	5000000, // Tier 20
]

TierValueCombineOverhead = 30000 //Overhead value to combine tiers

ValueMoneyMultiplier = 0.05 // Multiplier for calculating money values

/* StandardMoneyPerTier: This section calculates the amount of money a player should have in each tier, 
both as a minimum and maximum value. The calculation is based on the TierValueMaximums and ValueMoneyMultiplier.*/
StandardMoneyPerTier // Calculate the amount of money for each tier
[
	// For each tier, we calculate a range of money values.
	// The range is determined by the maximum value of the current and previous tier,
	// multiplied by the ValueMoneyMultiplier.
	{ Tier=1;  Money=["round((&~/TierValueMaximums/0)  * 2/3 * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/0) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=2;  Money=["round((&~/TierValueMaximums/0)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/1)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=3;  Money=["round((&~/TierValueMaximums/1)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/2)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=4;  Money=["round((&~/TierValueMaximums/2)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/3)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=5;  Money=["round((&~/TierValueMaximums/3)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/4)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=6;  Money=["round((&~/TierValueMaximums/4)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/5)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=7;  Money=["round((&~/TierValueMaximums/5)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/6)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=8;  Money=["round((&~/TierValueMaximums/6)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/7)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=9;  Money=["round((&~/TierValueMaximums/7)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/8)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=10; Money=["round((&~/TierValueMaximums/8)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/9)  * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=11; Money=["round((&~/TierValueMaximums/9)  * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/10) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=12; Money=["round((&~/TierValueMaximums/10) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/11) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=13; Money=["round((&~/TierValueMaximums/11) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/12) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=14; Money=["round((&~/TierValueMaximums/12) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/13) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=15; Money=["round((&~/TierValueMaximums/13) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/14) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=16; Money=["round((&~/TierValueMaximums/14) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/15) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=17; Money=["round((&~/TierValueMaximums/15) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/16) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=18; Money=["round((&~/TierValueMaximums/16) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/17) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=19; Money=["round((&~/TierValueMaximums/17) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/18) * (&~/ValueMoneyMultiplier), 0)"]; }
	{ Tier=20; Money=["round((&~/TierValueMaximums/18) * (&~/ValueMoneyMultiplier), 0)", "round((&~/TierValueMaximums/19) * (&~/ValueMoneyMultiplier), 0)"]; }
]

/* ValueFameMultiplier and StandardFamePerTier: This section calculates the amount of fame a player should have at each 
tier. The calculation is based on the TierValueMaximums and ValueFameMultiplier.*/
ValueFameMultiplier = (&StandardMaxFamePerTier/0/MaxFame) / (&~/TierValueMaximums/0) * (1/8) // Calculate the Fame multiplier

StandardFamePerTier  // Calculate the amount of fame for each tier
[
	// For each tier, we calculate the fame value.
	// The fame is determined by the maximum value of the current tier,
	// multiplied by the ValueFameMultiplier.
	{ Tier=1;  Fame="round((&~/TierValueMaximums/0)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=2;  Fame="round((&~/TierValueMaximums/1)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=3;  Fame="round((&~/TierValueMaximums/2)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=4;  Fame="round((&~/TierValueMaximums/3)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=5;  Fame="round((&~/TierValueMaximums/4)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=6;  Fame="round((&~/TierValueMaximums/5)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=7;  Fame="round((&~/TierValueMaximums/6)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=8;  Fame="round((&~/TierValueMaximums/7)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=9;  Fame="round((&~/TierValueMaximums/8)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=10; Fame="round((&~/TierValueMaximums/9)  * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=11; Fame="round((&~/TierValueMaximums/10) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=12; Fame="round((&~/TierValueMaximums/11) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=13; Fame="round((&~/TierValueMaximums/12) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=14; Fame="round((&~/TierValueMaximums/13) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=15; Fame="round((&~/TierValueMaximums/14) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=16; Fame="round((&~/TierValueMaximums/15) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=17; Fame="round((&~/TierValueMaximums/16) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=18; Fame="round((&~/TierValueMaximums/17) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=19; Fame="round((&~/TierValueMaximums/18) * (&~/ValueFameMultiplier), 0)"; }
	{ Tier=20; Fame="round((&~/TierValueMaximums/19) * (&~/ValueFameMultiplier), 0)"; }
]

MaxFame = 10000 // Maximum fame value
MaxFameOffset = -160  / (&MaxFameMultiple) // Offset for calculating the maximum fame
ValueMaxFameMultiplier = (&MaxFame) / (&~/TierValueMaximums/17) / (&MaxFameMultiple) // Multiplier for calculating the maximum fame
MaxFameMultiple = 10 // Multiple for the maximum fame

/*StandardMaxFamePerTier: This section calculates the maximum amount of fame a player can have at each tier. 
The calculation is based on the TierValueMaximums, ValueMaxFameMultiplier, MaxFameOffset, and MaxFameMultiple.*/
StandardMaxFamePerTier // Calculate the maximum fame for each tier
[
	// For each tier, we calculate the maximum fame value.
	// The maximum fame is determined by the maximum value of the current tier,
	// multiplied by the ValueMaxFameMultiplier, and added to the MaxFameOffset.
	{ Tier=1;  MaxFame="round((&~/TierValueMaximums/0)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=2;  MaxFame="round((&~/TierValueMaximums/1)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=3;  MaxFame="round((&~/TierValueMaximums/2)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=4;  MaxFame="round((&~/TierValueMaximums/3)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=5;  MaxFame="round((&~/TierValueMaximums/4)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=6;  MaxFame="round((&~/TierValueMaximums/5)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=7;  MaxFame="round((&~/TierValueMaximums/6)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=8;  MaxFame="round((&~/TierValueMaximums/7)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=9;  MaxFame="round((&~/TierValueMaximums/8)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=10; MaxFame="round((&~/TierValueMaximums/9)  * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=11; MaxFame="round((&~/TierValueMaximums/10) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=12; MaxFame="round((&~/TierValueMaximums/11) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=13; MaxFame="round((&~/TierValueMaximums/12) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=14; MaxFame="round((&~/TierValueMaximums/13) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=15; MaxFame="round((&~/TierValueMaximums/14) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=16; MaxFame="round((&~/TierValueMaximums/15) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=17; MaxFame="round((&~/TierValueMaximums/16) * (&~/ValueMaxFameMultiplier) + (&~/MaxFameOffset), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=18; MaxFame="round((&~/TierValueMaximums/17) * (&~/ValueMaxFameMultiplier), 0) * (&~/MaxFameMultiple)"; } // Not adding the offset to these last tiers because I want it to max out at an even 10000.
	{ Tier=19; MaxFame="round((&~/TierValueMaximums/18) * (&~/ValueMaxFameMultiplier), 0) * (&~/MaxFameMultiple)"; }
	{ Tier=20; MaxFame="round((&~/TierValueMaximums/19) * (&~/ValueMaxFameMultiplier), 0) * (&~/MaxFameMultiple)"; }
]

/* StandardFamePrereqPerTier: This section sets the fame requirement for each tier, 
which is based on the StandardMaxFamePerTier from the previous tier.*/
StandardFamePrereqPerTier // Set the fame prerequisite for each tier
[
	// For each tier, we set the fame prerequisite.
	// The fame prerequisite is the maximum fame of the previous tier.
	{ Tier=1;  Fame=0; }
	{ Tier=2;  Fame=&~/StandardMaxFamePerTier/0/MaxFame; }
	{ Tier=3;  Fame=&~/StandardMaxFamePerTier/1/MaxFame; }
	{ Tier=4;  Fame=&~/StandardMaxFamePerTier/2/MaxFame; }
	{ Tier=5;  Fame=&~/StandardMaxFamePerTier/3/MaxFame; }
	{ Tier=6;  Fame=&~/StandardMaxFamePerTier/4/MaxFame; }
	{ Tier=7;  Fame=&~/StandardMaxFamePerTier/5/MaxFame; }
	{ Tier=8;  Fame=&~/StandardMaxFamePerTier/6/MaxFame; }
	{ Tier=9;  Fame=&~/StandardMaxFamePerTier/7/MaxFame; }
	{ Tier=10; Fame=&~/StandardMaxFamePerTier/8/MaxFame; }
	{ Tier=11; Fame=&~/StandardMaxFamePerTier/9/MaxFame; }
	{ Tier=12; Fame=&~/StandardMaxFamePerTier/10/MaxFame; }
	{ Tier=13; Fame=&~/StandardMaxFamePerTier/11/MaxFame; }
	{ Tier=14; Fame=&~/StandardMaxFamePerTier/12/MaxFame; }
	{ Tier=15; Fame=&~/StandardMaxFamePerTier/13/MaxFame; }
	{ Tier=16; Fame=&~/StandardMaxFamePerTier/14/MaxFame; }
	{ Tier=17; Fame=&~/StandardMaxFamePerTier/15/MaxFame; }
	{ Tier=18; Fame=&~/StandardMaxFamePerTier/16/MaxFame; }
	{ Tier=19; Fame=&~/StandardMaxFamePerTier/17/MaxFame; }
	{ Tier=20; Fame=&~/StandardMaxFamePerTier/18/MaxFame; }
]

/* StandardReputationPerTier: This section calculates the reputation a player should have at each tier. 
The calculation is based on the TierValueMaximums, ValueFameMultiplier, 
and FameToRepFactor.*/
FameToRepFactor = 1 // Factor for converting fame to reputation
StandardReputationPerTier // Calculate the reputation for each tier
[
	// For each tier, we calculate the reputation value.
	// The reputation is determined by the maximum value of the current tier,
	// multiplied by the ValueFameMultiplier, and then by the FameToRepFactor.
	{ Tier=1;  Reputation="round((&~/TierValueMaximums/0)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=2;  Reputation="round((&~/TierValueMaximums/1)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=3;  Reputation="round((&~/TierValueMaximums/2)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=4;  Reputation="round((&~/TierValueMaximums/3)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=5;  Reputation="round((&~/TierValueMaximums/4)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=6;  Reputation="round((&~/TierValueMaximums/5)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=7;  Reputation="round((&~/TierValueMaximums/6)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=8;  Reputation="round((&~/TierValueMaximums/7)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=9;  Reputation="round((&~/TierValueMaximums/8)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=10; Reputation="round((&~/TierValueMaximums/9)  * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=11; Reputation="round((&~/TierValueMaximums/10) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=12; Reputation="round((&~/TierValueMaximums/11) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=13; Reputation="round((&~/TierValueMaximums/12) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=14; Reputation="round((&~/TierValueMaximums/13) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=15; Reputation="round((&~/TierValueMaximums/14) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=16; Reputation="round((&~/TierValueMaximums/15) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=17; Reputation="round((&~/TierValueMaximums/16) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=18; Reputation="round((&~/TierValueMaximums/17) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=19; Reputation="round((&~/TierValueMaximums/18) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
	{ Tier=20; Reputation="round((&~/TierValueMaximums/19) * (&~/ValueFameMultiplier) * (&~/FameToRepFactor), 0)"; }
]