Type = Ships // Configuration for spawning ships
Tags = [vip_ship] // Tags associated with the ships being spawned
Conditions { MinNodeTier=1; } // Conditions for triggering the ship spawn & Minimum node tier required for spawning
RandomWeight = 1 // Weighting for the randomness of this spawn
Count = [0, 1] // Range for the number of ships to spawn
Distance = [0, 14000] // Distance range within which the ships can spawn
MinDistanceFromTags = [[sun, 7500],[asteroid, 120],[vip_ship, 5000],[station, 2000],[bounty, 2000]] // Minimum distances from various tags to ensure proper placement of ships
//SynchronizeFactions = true
Allegiance = FactionCivilian // Allegiance of the spawned ships
InitToMax = false // Whether to initialize ship health to maximum
SpawnCrew = true // Whether to spawn crew members on the ship
RandomHealthRange = [90%, 100%] // Range for randomizing the ship's health percentage
Labels = ["Abandoned"] // Labels assigned to the ship
		NameGenerator // Configuration for generating ship names
		{
		    Type = Multi // Type of name generator
		    SubGenerators  // Sub-generators for names
		    [
		        {
		            Chance = 1  // Chance for this name list to be selected
		            Type = NameList // Type of list
		            Names
					[
					    "Admiral"
					    "Captain"
					    "Commander"
					    "General"
					    "Moff"
					    "Colonel"
					    "Major"
					    "Lieutenant"
					    "Marshal"
					    "Ensign"
					    "Squadron Leader"
					    "Wing Commander"
					    "Warlord"
					    "Overlord"
					    "Viceroy"
					    "Agent"
					    "Archduke"
					    "Baron"
					    "Chieftain"
					    "Consul"
					    "Count"
					    "Duke"
					    "Emir"
					    "Governor"
					    "King"
					    "Magistrate"
					    "Minister"
					    "Prince"
					    "Queen"
					    "Regent"
					    "Senator"
					    "Supreme Leader"
					]
		        }
		        {
		            Chance = 1  // Chance for this name list to be selected
		            Type = NameList // Type of list
		            Names  // List of names for the ship
					[
					    "Antilles"
					    "Vader"
					    "Kenobi"
					    "Tarkin"
					    "Fett"
					    "Windu"
					    "Thrawn"
					    "Organa"
					    "Solo"
					    "Skywalker"
					    "Krennic"
					    "Ackbar"
					    "Hux"
					    "Piett"
					    "Veers"
					    "Rendar"
					    "Marek"
					    "Calrissian"
					    "Secura"
					    "Tiin"
					    "Jinn"
					    "Katarn"
					    "Syndulla"
					    "Djarin"
					    "Kryze"
					    "Saxon"
					    "Vos"
					    "Bane"
					    "Malachor"
					    "Tano"
					    "Shan"
					    "Snoke"
					    "Grievous"
					    "Durron"
					    "Nihilus"
					    "Revan"
					    "Malgus"
					    "Gunray"
					    "Hutt"
					    "Zann"
					    "Tyranus"
					    "Sidious"
					    "Maul"
					    "Ventress"
					    "Opress"
					    "Tambor"
					    "Krayt"
					    "Satele"
					    "Cadera"
					    "Tal"
					    "Vizsla"
					    "Fisto"
					    "Gallia"
					    "Plo"
					    "Mundi"
					    "Unduli"
					    "Ti"
					    "Koon"
					    "Secura"
					    "Amedda"
					    "Valorum"
					    "Bonteri"
					    "Mothma"
					    "Dodonna"
					    "Madine"
					    "Rieekan"
					    "Ozzel"
					    "Piett"
					    "Jerjerrod"
					    "Tiaan"
						"SkipperWraith"
						"ClassicJam"
						"Jani"
						"Lafiel"
						"Wolfram"
						"Neojino"
						"Kroom"
						"Roasted"
						"Jerico"
						"Altraxia"
						"Winterbreeze"
						"Caudrea"
						"Trefies"						
					]
		        }
		    ]
		}
	ShipCriteria // Criteria for selecting the ships to spawn
	{
		UseLocalFactionWeights = true // Use local faction weights for ship selection
		Tier = +2  // Adjust the tier of the ships spawned by +2
		UseTierField = true // Consider the curret tier field for ship selection
		AllowTierRangeExpansion = true     // Allow expansion of tier range for selection
		Tags = [civilian] // Tags indicating the purpose of the ships
	}
	AI
	{
		Type = SWCivilianAI   // Custom AI type for civilian ships

	}
		// Synchronization settings for factions and allegiance
		SynchronizeFactions = true
		SynchronizeAllegiance = false
		SubSpawners // Array of sub-spawners for additional encounter elements
		[
			// POI
			{
				Type = Doodads
				Tags = [asteroid_field_poi, poi_unknown]
				DoodadType = sw.distressPOI // cosmoteer.poi_unknown
				ShowOnlyInFog = true
				Undiscovered = true
				HideIfUnexplored = false
				AutoRemoveWhenDiscovered = true
				//AutoRemoveWhenTagDestroyed = vip_ship

			}
			 // Spawner for the "bad guys"
			{
				Type = Ships
				Tags = [hive_of_villany]
				Count = 3
				Distance = 333
				SpawnsPerSlice = 1
				SpawnSlicePadding = 33%
				Allegiance = Unique
				FamePerTier = &/TIER_TABLES/StandardFamePerTier
				MaxFamePerTier = &/TIER_TABLES/StandardMaxFamePerTier
		
		NameGenerator   // Name generator for the "bad guys"
		{
		    Type = Multi
		    SubGenerators
		    [
		        {
		            Chance = 1
		            Type = NameList
		            Names
					[
						"Tracker"
						"Seeker"
						"Hunter"
						"Shadow"
						"Stalker"
						"Scout"
						"Reclaimer"
						"Pursuer"
						"Interceptor"
						"Sleuth"
						"Vindicator"
						"Ravager"
						"Huntsman"
						"Predator"
						"Nighthawk"
						"Outrider"
						"Strider"
						"Trapper"
						"Marauder"
						"Bane"
						"Harrier"
						"Pathfinder"
						"Ranger"
						"Reaper"
						"Vigilante"
					]
		        }
		        {
		            Chance = 1
		            Type = NameList
		            Names
					[
					    "Antilles"
					    "Vader"
					    "Kenobi"
					    "Tarkin"
					    "Fett"
					    "Windu"
					    "Thrawn"
					    "Organa"
					    "Solo"
					    "Skywalker"
					    "Krennic"
					    "Ackbar"
					    "Hux"
					    "Piett"
					    "Veers"
					    "Rendar"
					    "Marek"
					    "Calrissian"
					    "Secura"
					    "Tiin"
					    "Jinn"
					    "Katarn"
					    "Syndulla"
					    "Djarin"
					    "Kryze"
					    "Saxon"
					    "Vos"
					    "Bane"
					    "Malachor"
					    "Tano"
					    "Shan"
					    "Snoke"
					    "Grievous"
					    "Durron"
					    "Nihilus"
					    "Revan"
					    "Malgus"
					    "Gunray"
					    "Hutt"
					    "Zann"
					    "Tyranus"
					    "Sidious"
					    "Maul"
					    "Ventress"
					    "Opress"
					    "Tambor"
					    "Krayt"
					    "Satele"
					    "Cadera"
					    "Tal"
					    "Vizsla"
					    "Fisto"
					    "Gallia"
					    "Plo"
					    "Mundi"
					    "Unduli"
					    "Ti"
					    "Koon"
					    "Secura"
					    "Amedda"
					    "Valorum"
					    "Bonteri"
					    "Mothma"
					    "Dodonna"
					    "Madine"
					    "Rieekan"
					    "Ozzel"
					    "Piett"
					    "Jerjerrod"
					    "Tiaan"
						"SkipperWraith"
						"ClassicJam"
						"Jani"
						"Lafiel"
						"Wolfram"
						"Neojino"
						"Kroom"
						"Roasted"
						"Jerico"
						"Altraxia"
						"Winterbreeze"
						"Caudrea"
						"Trefies"
						"Fusion"
					]
		        }
		    ]
		}
				ShipCriteria         // Criteria for selecting the "bad guys" ships to spawn
				{
					UseLocalFactionWeights = true
					UseTierField = true
					Tier = -1
					AllowTierRangeExpansion = true
					Tags = [combat]
				}

				AI         // AI behavior settings for the "bad guys" ships
				{
					Type = StationGuard
					PatrolRadius = 200
					TargetAcquireRangeFromOrigin = 550
					TargetUnacquireRangeFromOrigin = 750
				}
			}
    		// Mission to save the VIP ship
			{
				Type = Mission // Type of mission to spawn
				Metatype = SWRescueVIP // Metatype of the mission to spawn
				SpawnAt = Tag	    // Location to spawn the mission at, using a tag
				SpawnAtTag = { Mode=Nearest; Tag=trade_station; }     // Tag indicating where to spawn the mission (the VIP ship that needs to be rescued)
				Faction = OwnerOfTag     // Faction involved in the mission, based on the owner of the tag
				FactionTag = &SpawnAtTag     // Tag indicating the faction, linked to the spawn location tag
				Objectives     // Objectives for the mission
				[
					{
						Type = AnyOrder // Objective type requiring sequential completion of sub-objectives
						NumRequiredToComplete = 2
						SubObjectives // Sub-objectives within the main objective
						[
							{
								Type = GotoShip
								//InvertGoTo = false;
								//InvertGoToDistance = 4500
								DestinationShipTag = { Tag=vip_ship; LimitToFleet=true; }
								GetTierFromTierField = true
							}
							{		
								Type = DefeatShips // Objective type to defeat ships
								TargetsTag = { Tag=hive_of_villany; Distance=800; Max=3;} // Tag indicating the target ships to defeat, within a certain distance
                                targetCount = 3 // Kill EVERYONE
								TargetAreaTag = { Mode=Nearest; Tag=poi_unknown; } // Tag indicating the target area for the objective
								OverrideDisplayFormatKey = "Objectives/SavetheVIP" // Key to override the display format for the objective
								TierCombineMode = None
								//AllowSurrender = false // Disallow surrender for this objective
							}
							{
								Type = ProtectShips // Objective type to protect ships
								TargetsTag = { Mode=Nearest; Distance=2400; Tag=vip_ship; Max=1; }  // Tag indicating the ships to protect (nearest VIP ship)
								TargetAreaTag = { Mode=Nearest; Tag=poi_unknown; } // Tag indicating the target area for the objective
								OverrideDisplayFormatKey = "Objectives/SavetheVIP"
                                targetCount = 1 // If any VIP ship survives, the mission is a success
								TierCombineMode = None
							}
							/*
							{
								Type = DontSurrenderTo
								TargetsTag = { Tag=hive_of_villany; LimitToFleet=true; }
								TierCombineMode = None
							}
							*/
//							{
//								// Objective type to receive rewards
//								Type = ReceiveRewards
//								Tag indicating the ship to contact for receiving rewards (nearest VIP ship)
//								ContactShipTag = { Mode=Nearest; Tag=vip_ship/*trade_station*/; }//{ Mode=Nearest; Tag=vip_ship; }//{ Mode=Nearest; Tag=trade_station; }
//							}
						]
					}
				]
				Rewards
				[
					{
						Type = Money
						MoneyPerHighTier = &/TIER_TABLES/StandardMoneyPerTier
						MoneyPerTierMultiplier = 6
						RoundToMultiple = 500
					}
					{
						Type = Fame
						FamePerHighTier = &/TIER_TABLES/StandardFamePerTier
						FamePerTierMultiplier = 2
						MaxFamePerHighTier = &/TIER_TABLES/StandardMaxFamePerTier
					}
		            {
		                Type = Reputation
		                ReputationPerHighTier = &/TIER_TABLES/StandardReputationPerTier
		                ReputationPerTierMultiplier = 4
		            }
				]
			}
		]
